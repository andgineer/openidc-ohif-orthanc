include /usr/share/nginx/modules/*.conf; # See /usr/share/doc/nginx/README.dynamic.
env ENV_VAR;

# this location symlinked to /dev/stderr, so that Docker logging works correctly
error_log /usr/local/openresty/nginx/logs/error.log debug;

events {
    worker_connections 1024; ## Default: 1024
    use epoll; # http://nginx.org/en/docs/events.html
    multi_accept on; # http://nginx.org/en/docs/ngx_core_module.html#multi_accept
}

http {
    lua_package_path '/usr/local/openresty/lualib/?.lua;;';

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $env_var $lua_var '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    # this location symlinked to /dev/stdout, so that Docker logging works correctly
    access_log /usr/local/openresty/nginx/logs/access.log main;

    server {
        listen 80;
        listen 443 ssl;

        ssl_certificate /etc/ssl/nginx.crt;
        ssl_certificate_key /etc/ssl/nginx.key;

        # we should init nginx vars before using it in lua
        set $lua_var '';
        set $env_var '';

        access_by_lua_block {
            ngx.var.env_var = os.getenv("ENV_VAR") or "default!!";
            ngx.ctx.local_var = {
                foo = "bar",
                baz = "qux"
            }
            ngx.var.lua_var = ngx.ctx.local_var.foo
        }
        location / {
            content_by_lua_block {
                local cjson = require("cjson")
                ngx.header["Content-type"] = 'text/html'
                ngx.say("<html><body>")
                for k, v in pairs(ngx.ctx.local_var) do
                    ngx.say(k .. cjson.encode(v))
                end
                ngx.say("<p>ENV_VAR: " .. ngx.var.env_var .. "</p>")
                ngx.say("</body></html>")
                --ngx.say(string.format([[
                --    <html>
                --        <body>
                --            <p>ENV_VAR: "%s", %s</p>
                --        </body>
                --    </html>
                --]], ngx.var.env_var or "undefined", local_var))
            }
        }
    }
}
